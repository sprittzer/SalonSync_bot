"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∞–ª–æ–Ω–æ–º –∫—Ä–∞—Å–æ—Ç—ã.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.
"""

import tkinter as tk
from tkinter import ttk, messagebox
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional, Tuple
from booking_system import BookingSystem
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class AdminPanel:
    """
    –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã.
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
    - –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
    - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π
    - –û—Ç–º–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–∞–º (—Å–µ–≥–æ–¥–Ω—è, –∑–∞–≤—Ç—Ä–∞, –Ω–µ–¥–µ–ª—è)
    """
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏.
        –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
        
        Raises:
            Exception: –ü—Ä–∏ –æ—à–∏–±–∫–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        try:
            self.booking = BookingSystem()
            self.window = tk.Tk()
            self.window.title("Beauty Salon Admin Panel")
            self.window.geometry("1000x600")
            self._setup_ui()
            self._load_data()
            logger.info("Admin panel initialized successfully")
        except Exception as e:
            logger.error(f"Failed to initialize admin panel: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {str(e)}")
            self.window.destroy()
            raise

    def _setup_ui(self) -> None:
        """
        –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        –°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ç–∞–±–ª–∏—Ü—É –∑–∞–ø–∏—Å–µ–π.
        """
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—Ä–µ–π–º—ã
        control_frame = ttk.Frame(self.window, padding="10")
        control_frame.pack(fill=tk.X)

        display_frame = ttk.Frame(self.window)
        display_frame.pack(fill=tk.BOTH, expand=True)

        # –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        ttk.Button(control_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                  command=self._load_data).pack(side=tk.LEFT, padx=5)
        ttk.Button(control_frame, text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å", 
                  command=self._add_booking_dialog).pack(side=tk.LEFT, padx=5)
        ttk.Button(control_frame, text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", 
                  command=self._cancel_booking).pack(side=tk.LEFT, padx=5)
        
        # –ü–µ—Ä–∏–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.period_var = tk.StringVar(value="today")
        ttk.Radiobutton(control_frame, text="üìÖ –°–µ–≥–æ–¥–Ω—è", 
                       variable=self.period_var, value="today", 
                       command=self._load_data).pack(side=tk.LEFT, padx=5)
        ttk.Radiobutton(control_frame, text="üìÖ –ó–∞–≤—Ç—Ä–∞", 
                       variable=self.period_var, value="tomorrow", 
                       command=self._load_data).pack(side=tk.LEFT, padx=5)
        ttk.Radiobutton(control_frame, text="üìÖ –ù–µ–¥–µ–ª—è", 
                       variable=self.period_var, value="week", 
                       command=self._load_data).pack(side=tk.LEFT, padx=5)

        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–ø–∏—Å–µ–π
        columns = ("id", "client", "phone", "service", "master", "date", "time", "duration")
        self.bookings_tree = ttk.Treeview(
            display_frame, columns=columns, show="headings", selectmode="browse"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        column_configs = {
            "id": ("ID", 50, tk.CENTER),
            "client": ("–ö–ª–∏–µ–Ω—Ç", 150, tk.W),
            "phone": ("–¢–µ–ª–µ—Ñ–æ–Ω", 120, tk.W),
            "service": ("–£—Å–ª—É–≥–∞", 150, tk.W),
            "master": ("–ú–∞—Å—Ç–µ—Ä", 150, tk.W),
            "date": ("–î–∞—Ç–∞", 100, tk.CENTER),
            "time": ("–í—Ä–µ–º—è", 80, tk.CENTER),
            "duration": ("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 100, tk.CENTER)
        }
        
        for col, (text, width, anchor) in column_configs.items():
            self.bookings_tree.heading(col, text=text)
            self.bookings_tree.column(col, width=width, anchor=anchor)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = ttk.Scrollbar(display_frame, orient=tk.VERTICAL, 
                                 command=self.bookings_tree.yview)
        self.bookings_tree.configure(yscroll=scrollbar.set)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.bookings_tree.pack(fill=tk.BOTH, expand=True)

    def _load_data(self) -> None:
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ.
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º.
        """
        period = self.period_var.get()
        today = datetime.now().date()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if period == "today":
            date_from = today
            date_to = today
        elif period == "tomorrow":
            date_from = today + timedelta(days=1)
            date_to = date_from
        else:  # week
            date_from = today
            date_to = today + timedelta(days=7)
        
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.bookings_tree.get_children():
            self.bookings_tree.delete(item)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∑–∞–ø–∏—Å–∏
            bookings = self._get_bookings_for_period(date_from, date_to)
            for booking in bookings:
                self.bookings_tree.insert("", tk.END, values=(
                    booking['id'],
                    booking['client_name'],
                    booking['client_phone'],
                    booking['service_name'],
                    booking['master_name'],
                    booking['date'],
                    booking['start_time'],
                    f"{booking['duration']} –º–∏–Ω"
                ))
            logger.info(f"Loaded {len(bookings)} bookings for period {date_from} - {date_to}")
        except Exception as e:
            logger.error(f"Error loading bookings: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")

    def _get_bookings_for_period(self, date_from: datetime.date, 
                               date_to: datetime.date) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.
        
        Args:
            date_from: –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
            date_to: –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
            
        Returns:
            List[Dict]: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö, —É—Å–ª—É–≥–∞—Ö –∏ –º–∞—Å—Ç–µ—Ä–∞—Ö
        """
        all_bookings = []
        current_date = date_from
        
        while current_date <= date_to:
            date_str = current_date.strftime("%Y-%m-%d")
            bookings = self.booking.conn.execute(
                """SELECT b.id, c.name as client_name, c.phone as client_phone,
                          s.name as service_name, m.name as master_name,
                          b.date, b.start_time, s.duration
                   FROM bookings b
                   JOIN clients c ON b.client_id = c.id
                   JOIN services s ON b.service_id = s.id
                   JOIN masters m ON b.master_id = m.id
                   WHERE b.date = ? AND b.status = 'confirmed'
                   ORDER BY b.start_time""",
                (date_str,)
            ).fetchall()
            
            all_bookings.extend([dict(zip(
                ['id', 'client_name', 'client_phone', 'service_name', 
                 'master_name', 'date', 'start_time', 'duration'], row)) 
                for row in bookings])
            
            current_date += timedelta(days=1)
        
        return all_bookings

    def _add_booking_dialog(self) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.
        –°–æ–∑–¥–∞–µ—Ç –æ–∫–Ω–æ —Å —Ñ–æ—Ä–º–æ–π –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø–∏—Å–∏.
        """
        dialog = tk.Toplevel(self.window)
        dialog.title("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
        dialog.geometry("400x500")
        dialog.transient(self.window)  # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º
        dialog.grab_set()  # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º —Ñ–æ–∫—É—Å
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º—ã
        client_name = tk.StringVar()
        client_phone = tk.StringVar()
        service_var = tk.StringVar()
        master_var = tk.StringVar()
        date_var = tk.StringVar(value=datetime.now().strftime("%Y-%m-%d"))
        time_var = tk.StringVar()
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ —É—Å–ª—É–≥ –∏ –º–∞—Å—Ç–µ—Ä–æ–≤
        services = [s['name'] for s in self.booking.get_all_services()]
        masters = [m['name'] for m in self.booking.get_all_masters()]
        
        # –°–æ–∑–¥–∞–µ–º –∏ —Ä–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ—Ä–º—ã
        form_elements = [
            ("üë§ –ö–ª–∏–µ–Ω—Ç:", client_name),
            ("üì± –¢–µ–ª–µ—Ñ–æ–Ω:", client_phone),
            ("üíÖ –£—Å–ª—É–≥–∞:", service_var, services),
            ("üíá –ú–∞—Å—Ç–µ—Ä:", master_var, masters),
            ("üìÖ –î–∞—Ç–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):", date_var),
            ("‚è∞ –í—Ä–µ–º—è (–ß–ß:–ú–ú):", time_var)
        ]
        
        for label_text, var, *args in form_elements:
            ttk.Label(dialog, text=label_text).pack(pady=(10, 0))
            if args:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π, —Å–æ–∑–¥–∞–µ–º Combobox
                ttk.Combobox(dialog, textvariable=var, values=args[0]).pack(
                    fill=tk.X, padx=10, pady=5)
            else:  # –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞–µ–º Entry
                ttk.Entry(dialog, textvariable=var).pack(fill=tk.X, padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(dialog)
        button_frame.pack(fill=tk.X, pady=10)
        
        ttk.Button(button_frame, text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", 
                  command=lambda: self._save_booking(
                      client_name.get(),
                      client_phone.get(),
                      service_var.get(),
                      master_var.get(),
                      date_var.get(),
                      time_var.get(),
                      dialog
                  )).pack(side=tk.LEFT, padx=5, expand=True)
        
        ttk.Button(button_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", 
                  command=dialog.destroy).pack(side=tk.LEFT, padx=5, expand=True)

    def _save_booking(self, client_name: str, client_phone: str, 
                     service_name: str, master_name: str, 
                     date_str: str, time_str: str, dialog: tk.Toplevel) -> None:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
        
        Args:
            client_name: –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞
            client_phone: –¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞
            service_name: –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
            master_name: –ò–º—è –º–∞—Å—Ç–µ—Ä–∞
            date_str: –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD
            time_str: –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
            dialog: –û–∫–Ω–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            if not all([client_name, client_phone, service_name, 
                       master_name, date_str, time_str]):
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º ID —Å–µ—Ä–≤–∏—Å–∞ –∏ –º–∞—Å—Ç–µ—Ä–∞
            service_id = next((s['id'] for s in self.booking.get_all_services() 
                             if s['name'] == service_name), None)
            master_id = next((m['id'] for m in self.booking.get_all_masters() 
                            if m['name'] == master_name), None)
            
            if not service_id or not master_id:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–£—Å–ª—É–≥–∞ –∏–ª–∏ –º–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
            try:
                datetime.strptime(date_str, "%Y-%m-%d")
                datetime.strptime(time_str, "%H:%M")
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
            client_id = self.booking.add_client(client_name, client_phone)
            if not client_id:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            success = self.booking.create_booking(
                client_id=client_id,
                service_id=service_id,
                master_id=master_id,
                date=date_str,
                start_time=time_str
            )
            
            if success:
                logger.info(f"Created new booking for client {client_name}")
                messagebox.showinfo("–£—Å–ø–µ—Ö", "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
                dialog.destroy()
                self._load_data()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å")
                
        except Exception as e:
            logger.error(f"Error saving booking: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

    def _cancel_booking(self) -> None:
        """
        –û—Ç–º–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏.
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π.
        """
        selected_item = self.bookings_tree.selection()
        if not selected_item:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã")
            return
        
        booking_id = self.bookings_tree.item(selected_item)['values'][0]
        booking_info = self.bookings_tree.item(selected_item)['values']
        
        confirm_message = (
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å?\n\n"
            f"–ö–ª–∏–µ–Ω—Ç: {booking_info[1]}\n"
            f"–£—Å–ª—É–≥–∞: {booking_info[3]}\n"
            f"–î–∞—Ç–∞: {booking_info[5]}\n"
            f"–í—Ä–µ–º—è: {booking_info[6]}"
        )
        
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", confirm_message):
            try:
                success = self.booking.cancel_booking(booking_id)
                if success:
                    logger.info(f"Cancelled booking {booking_id}")
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
                    self._load_data()
                else:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
            except Exception as e:
                logger.error(f"Error cancelling booking: {e}")
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


def main():
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å.
    """
    try:
        logger.info("Starting admin panel application")
        app = AdminPanel()
        app.window.mainloop()
    except Exception as e:
        logger.error(f"Application error: {e}")
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()